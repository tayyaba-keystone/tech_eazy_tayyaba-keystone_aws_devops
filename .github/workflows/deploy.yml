name: Deploy Java App via Terraform

on:
  push:
    branches:
      - main                       # ‚úÖ Triggers workflow when you push to main branch
    tags:
      - deploy-dev                 # ‚úÖ You can also trigger by pushing tag 'deploy-dev'
      - deploy-prod                # ‚úÖ Or tag 'deploy-prod'

jobs:
  deploy:
    name: Provision and Deploy
    runs-on: ubuntu-latest

    env:
      BUCKET_NAME: ${{ secrets.TF_VAR_BUCKET_NAME }}             # ‚úÖ Your S3 bucket name from GitHub Secrets
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}       # ‚úÖ AWS access key
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # ‚úÖ AWS secret key

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0                               # ‚úÖ You can modify Terraform version if needed

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan -var="bucket_name=${{ env.BUCKET_NAME }}"

      - name: Terraform Apply
        run: terraform apply -auto-approve -var="bucket_name=${{ env.BUCKET_NAME }}"

      - name: Get EC2 Public IP
        id: getip
        run: |
          IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=my-ec2" \             # üîß Replace 'my-ec2' with your actual EC2 Name tag if different
            --query "Reservations[*].Instances[*].PublicIpAddress" \
            --output text)
          echo "EC2_IP=$IP" >> $GITHUB_ENV
          echo "::set-output name=ec2ip::$IP"

      - name: Save EC2 private key
        run: |
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > ec2_key.pem    # ‚úÖ Save your private key securely
          chmod 600 ec2_key.pem

      - name: SSH and Deploy Java App
        run: |
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem ubuntu@$EC2_IP << EOF
            sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys B1998361219BD9C9
            sudo apt-add-repository 'deb https://repos.azul.com/zulu/deb stable main' -y
            sudo apt update -y
            sudo apt install -y zulu21-jdk
       
            git clone https://github.com/techeazy-consulting/techeazy-devops.git   # üîß Replace with your actual Java app GitHub repo
                                              
            ./mvnw clean package -DskipTests                      # ‚úÖ Compile your Java project ‚Äî use mvn or ./mvnw based on your setup
            nohup java -jar target/*.jar > app.log 2>&1 &         # ‚úÖ Starts app in background, logs to app.log
          EOF

      - name: Upload Logs to S3
        run: |
          scp -i ec2_key.pem ubuntu@$EC2_IP:/home/ubuntu/app/output.log .  # üîß Replace 'yourjavarepo' with actual path if different
          aws s3 cp app.log s3://$BUCKET_NAME/logs/output.log

      - name: Health Check - Port 80
        run: |
          for i in {1..10}; do
            status=$(curl -s -o /dev/null -w "%{http_code}" http://$EC2_IP)
            if [ "$status" -eq 200 ]; then
              echo "‚úÖ App is healthy on port 80"
              exit 0
            fi
            echo "Waiting for app... ($i)"
            sleep 10
          done
          echo "‚ùå App failed health check"
          exit 1
